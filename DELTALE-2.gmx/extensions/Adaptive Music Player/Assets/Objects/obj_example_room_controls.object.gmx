<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>crossfadeTime = 2.0;
theCurrentSong = 0;
theCurrentLayer = 0;
playing = false;
paused = false;
looping = false;
priority = 10;
crossfadeTime = 4.0;
fadesActive = false;
globalVolume = 1.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playing &amp;&amp; !obj_music_player.currentlyPlaying) {
    playing = false;
}

// Handle Layer Requests
if (keyboard_check(vk_shift)) {
    var hitLayer = false;
    if (keyboard_check_pressed(ord('0'))) {
        theCurrentLayer = 0;        
        hitLayer = true;
    }
    
    else if (keyboard_check_pressed(ord('1'))) {
        theCurrentLayer = 1;    
        hitLayer = true;
    }
    
    else if (keyboard_check_pressed(ord('2'))) {
        theCurrentLayer = 2;
        hitLayer = true;
    }
    
    else if (keyboard_check_pressed(ord('3'))) {
        theCurrentLayer = 3;
        hitLayer = true;
    }
    
    if (hitLayer) {
        if (theCurrentLayer != obj_music_player.currentLayerNumber) {
            if (playing) {
                with (obj_music_player) scr_music_crossfade_layer(other.theCurrentLayer,other.crossfadeTime);
            }
        }
    }
}

// Handle Song Requests
else {
    var hitSong = false;
    if (keyboard_check_pressed(ord('0'))) {
        theCurrentSong = 0;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('1'))) {
        theCurrentSong = 1;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('2'))) {
        theCurrentSong = 2;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('3'))) {
        theCurrentSong = 3;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('4'))) {
        theCurrentSong = 4;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('5'))) {
        theCurrentSong = 5;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('6'))) {
        theCurrentSong = 6;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('7'))) {
        theCurrentSong = 7;
        hitSong = true;
    }
    
    else if (keyboard_check_pressed(ord('8'))) {
        theCurrentSong = 8;   
        hitSong = true;
    }
    
    if (hitSong) {
        if (theCurrentSong != obj_music_player.currentSongNumber) {
            if (playing) {
                with (obj_music_player) scr_music_play(other.theCurrentSong,other.theCurrentLayer,other.priority,other.looping,other.crossfadeTime);
            }
        }
    }
}


// Transport Controls

// The Play/Pause Button
if (keyboard_check_pressed(vk_space)) {
    if (!playing) {
        if (!fadesActive) {
            with (obj_music_player) scr_music_play(other.theCurrentSong,other.theCurrentLayer,other.priority,other.looping,other.crossfadeTime);
        }
        else {
            with (obj_music_player) scr_music_fadein_play(other.theCurrentSong,other.theCurrentLayer,other.priority,other.looping,other.crossfadeTime);
        }
        playing = true;
    }
    else {
        if (!paused) {
            with (obj_music_player) scr_music_pause();
            paused = true;
        }
        else {
            with (obj_music_player) scr_music_unpause();
            paused = false;
        }
    }
}

else if (keyboard_check_pressed(vk_enter)) {
    if (playing) {
        if (!fadesActive) {
            with (obj_music_player) scr_music_stop();
        }
        else {
            with (obj_music_player) scr_music_fadeout(other.crossfadeTime);
        }
        playing = false;
    }
    paused = false;
}

else if (keyboard_check_pressed(vk_add)) {
    globalVolume = clamp(globalVolume+0.1,0.0,1.0);
    with (obj_music_player) scr_music_set_global_volume(other.globalVolume);
}

else if (keyboard_check_pressed(vk_subtract)) {
    globalVolume = clamp(globalVolume-0.1,0.0,1.0);
    with (obj_music_player) scr_music_set_global_volume(other.globalVolume);
}

else if (keyboard_check_pressed(vk_alt)) {
    fadesActive = !fadesActive;
}

else if (keyboard_check_pressed(vk_control)) {
    looping = !looping;
    obj_music_player.currentlyLooping = looping;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var w=640;
var h=480;
display_set_gui_size(w,h);
draw_set_colour(c_white);
draw_set_font(fnt_music_example);

draw_set_halign(fa_center);
draw_text(w/2,0,"GRUMBLE LABS ADAPTIVE MUSIC PLAYER EXAMPLE ROOM");
draw_text(w/2,20,"(SONGS AND LAYERS ARE ZERO-INDEXED)");

draw_set_colour(c_dkgray);
draw_rectangle(105,75,295,225,false);


draw_set_colour(c_white);
draw_set_halign(fa_left);
draw_text(110,80,"SONG: " + string(theCurrentSong) + "/" + string(array_height_2d(obj_music_player.song)-1));
draw_text(110,100,"LAYER: " + string(theCurrentLayer) + "/" + string(array_length_2d(obj_music_player.song,theCurrentSong)-1));
draw_text(110,120,"PLAYING: " + string(playing));
draw_text(110,140,"PAUSED: " + string(paused));
draw_text(110,160,"LOOPING: " + string(looping));
draw_text(110,180,"FADES: " + string(fadesActive));
draw_text(110,200,"VOLUME: " + string(globalVolume));


draw_sprite_ext(spr_grumblelabs,0,400,80,0.5,0.5,0,c_white,1.0);

draw_set_colour(c_white);
draw_rectangle(80,255,560,430,false);

draw_set_colour(c_black);
draw_set_halign(fa_center);
draw_text(w/2,260,"SPACE to Play/Fade In/Pause");
draw_text(w/2,280,"ENTER to Stop/Fade Out");
draw_text(w/2,300,"NUMBERS to Select Song");
draw_text(w/2,320,"SHIFT-NUMBERS to Select Layer");
draw_text(w/2,340,"CTRL to Toggle Looping");
draw_text(w/2,360,"ALT to Toggle Fade-Ins and Fade-Outs");
draw_text(w/2,380,"PLUS to Increase Global Volume");
draw_text(w/2,400,"MINUS to Decrease Global Volume");

draw_set_colour(c_white);
draw_text(w/2,450,"VISIT WWW.GRUMBLELABS.COM FOR MORE MUSIC");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
