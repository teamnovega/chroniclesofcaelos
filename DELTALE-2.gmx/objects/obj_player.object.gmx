<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerWalkF</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>obj_playerLifeForm_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
event_inherited();
window_center();
startingPointX = xstart;
startingPointY = ystart;
new_x = startingPointX;
new_y = startingPointY;
r = 0;
playerSlot = 1;
global.isSneaking = 0;
global.wasSneaking = 0;
spd = 4;
hspd = 0;
vspd = 0;
len = 0;
// Set Facing Sprites
facing = RIGHT;
movement = MOVE;
//
sprite[RIGHT, MOVE] = spr_playerWalkR;
sprite[UP, MOVE] = spr_playerWalkB;
sprite[DOWN, MOVE] = spr_playerWalkF;
sprite[LEFT, MOVE] = spr_playerWalkL;
//
sprite[RIGHT, ATTACK] = spr_playerAttackR;
sprite[UP, ATTACK] = spr_playerAttackB;
sprite[DOWN, ATTACK] = spr_playerAttackF;
sprite[LEFT, ATTACK] = spr_playerAttackL;
//
attacked = false;
sprattack = false;
image_speed = 0;
image_index = 7;
scr_get_gamepad_input(0);
global.playerState = scr_move_state;
global.isDashing = false;
//Z Gravity Variables
global.z = 0;
zground = 0;
global.zspd = 0;
zgrav = 0.75;
jumpspeed = 12;
jumping = 0;
//
alarm[2] = 4;
global.savedRoom = room;
//
// Create controllers if they don't exist
if (!instance_exists(obj_createControllers)) {
    instance_create(0,0,obj_createControllers);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack Alarm

switch (facing) {
        case RIGHT:
            sprite_index = spr_linkAttackR;
            image_index = 0;
            image_speed = 1;
            hitboxTime = 5;
            break;
            
        case LEFT:
            sprite_index = spr_linkAttackL;
            image_index = 0;
            image_speed = 1;
            hitboxTime = 5;
            break;
            
        case DOWN:
            sprite_index = spr_linkAttackF;
            image_index = 0;
            image_speed = 1;
            hitboxTime = 3;
            break;
            
        case UP:
            sprite_index = spr_linkAttackB;
            image_index = 0;
            image_speed = 1;
            hitboxTime = 5;
            break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Hurt Overlay
sprattack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set vibration back to 0
gamepad_set_vibration(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Animations
if (global.playerState == scr_attack_state) {
    global.playerState = scr_move_state;
    attacked = false;
    //Reset Animations
    movement = MOVE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn wasSneaking off
global.wasSneaking = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This alarm is for the dash state.
global.playerState = scr_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth Correction
depth = (-phy_position_y*2)+10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Optimize the Camera
if ( r == 10 ) { r=0; optimize_render(); } 
else r++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the Audio Listener
audio_set_master_gain(0, global.sfxGain);
audio_listener_set_position(0, x, y, global.z);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get the Player's Input / State
event_inherited();
scr_get_gamepad_input(0);
script_execute(global.playerState, .25, 5, 0);

sprite_index = sprite[facing, movement];

// Check for Death
if (global.playerHP &lt;= 0) {
    instance_destroy();
}
// Change Pad Colour (PS4 Only)
if (os_type == os_ps4) {
    if (global.playerHP &lt;= 2) {
        if (gamepad_is_connected(0)) {
            gamepad_set_colour(0,c_red);
        } else {
            gamepad_set_colour(0,c_fuchsia);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go through the door / transition
if (room_exists(other.new_room))
{
    new_x = other.new_x;
    new_y = other.new_y;
    fade = instance_create(0,0,obj_fade);
    fade.new_room = other.new_room;
    with(other) 
    {
        obj_player.startingPoint = startingPoint;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_EXP">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect expr
with (other) {
    instance_destroy();
}
with (obj_playerStats) {
    global.expr += 1;
    if (global.expr &gt;= maxexpr)
    {
        level += 1;
        global.expr = global.expr-maxexpr;
        maxexpr *= 1.2;
        stamina += 30;
        maxstamina += 30;
        attack += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heroWing">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect Hero's HeartWing
with (other) {
    instance_destroy();
}

// Create a new slot at the end, and give it a Hero's HeartWing
var hhwslot = array_length_1d(global.heartWing);
with (obj_heartWingHPController) {
        global.heartWingHP[hhwslot] = 6;
        global.heartWing[hhwslot] = spr_UI_herosHW;
        index[hhwslot] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_goldWing">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect Gold HeartWing

with (other) {
    instance_destroy();
}

with (obj_heartWingHPController) {
    // If there is space
    if !(lastNHWing &gt;= 7)
    and (global.heartWing[lastNHWing+1] == spr_UI_emptyHW)
    and (global.heartWing[lastNHWing+1] != spr_UI_herosEmptyHW) {
    
        // If the inventory isn't full, then fill it.
        global.heartWingHP[lastNHWing+1] = 3;
        global.heartWing[lastNHWing+1] = spr_UI_goldHW;
        index[lastNHWing+1] = 0;
        
    } else {
        // If it is full, check if the last slot has anything higher-tier.
        
        // If there's not a gold, or hero one in the last slot, then replace it!
        if (global.heartWing[lastNHWing] != spr_UI_herosHW)
        and (global.heartWing[lastNHWing] != spr_UI_herosEmptyHW) {
            global.heartWingHP[lastNHWing] = 3;
            global.heartWing[lastNHWing] = spr_UI_goldHW;
            index[lastNHWing] = 0;
        } else {
            // Can't collect HeartWing! Replace sound with "Restricted" sound.
            audio_play_sound(snd_lowHealth,0,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_silverWing">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect Silver HeartWing

with (other) {
    instance_destroy();
}

with (obj_heartWingHPController) {
    // If there is space
    if !(lastNHWing &gt;= 7)
    and (global.heartWing[lastNHWing+1] == spr_UI_emptyHW)
    and (global.heartWing[lastNHWing+1] != spr_UI_herosEmptyHW) {
    
        // If the inventory isn't full, then fill it.
        global.heartWingHP[lastNHWing+1] = 2;
        global.heartWing[lastNHWing+1] = spr_UI_silverHW;
        index[lastNHWing+1] = 0;
        
    } else {
        // If it is full, check if the last slot has anything higher-tier.
        
        // If there's not a gold, or hero one in the last slot, then replace it!
        if (global.heartWing[lastNHWing] != spr_UI_goldHW)
        and (global.heartWing[lastNHWing] != spr_UI_herosHW)
        and (global.heartWing[lastNHWing] != spr_UI_herosEmptyHW) {
            global.heartWingHP[lastNHWing] = 2;
            global.heartWing[lastNHWing] = spr_UI_silverHW;
            index[lastNHWing] = 0;
        } else {
            // Can't collect HeartWing! Replace sound with "Restricted" sound.
            audio_play_sound(snd_lowHealth,0,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bronzeWing">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect Bronze HeartWing

with (other) {
    instance_destroy();
}

with (obj_heartWingHPController) {
    // If there is space
    if !(lastNHWing &gt;= 7)
    and (global.heartWing[lastNHWing+1] == spr_UI_emptyHW)
    and (global.heartWing[lastNHWing+1] != spr_UI_herosEmptyHW) {
    
        // If the inventory isn't full, then fill it.
        global.heartWingHP[lastNHWing+1] = 1;
        global.heartWing[lastNHWing+1] = spr_UI_bronzeHW;
        index[lastNHWing+1] = 0;
        
    } else {
        // If it is full, check if the last slot has anything higher-tier.
        
        // If there's not a silver, gold, or hero one, then replace it!
        if (global.heartWing[lastNHWing] != spr_UI_silverHW)
        and (global.heartWing[lastNHWing] != spr_UI_goldHW)
        and (global.heartWing[lastNHWing] != spr_UI_herosHW)
        and (global.heartWing[lastNHWing] != spr_UI_herosEmptyHW) {
            global.heartWingHP[lastNHWing] = 1;
            global.heartWing[lastNHWing] = spr_UI_bronzeHW;
            index[lastNHWing] = 0;
        } else {
            // Can't collect HeartWing! Replace sound with "Restricted" sound.
            audio_play_sound(snd_lowHealth,0,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change back to move state
alarm[2] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerprefs_has("x_1")) 
and (playerprefs_has("y_1")) 
and (global.loaded == 1) {
    new_x = playerprefs_get("x_1");
    new_y = playerprefs_get("y_1");
    global.loaded = 0;
} else {
    new_x = startingPointX;
    new_y = startingPointY;
}
if (room != rm_loadingScreen) {
    phy_fixed_rotation = true;
}
view_xview[0] = x-320;
view_yview[0] = y-240;
persistent = true;
x = new_x;
y = new_y;
phy_position_x = new_x;
phy_position_y = new_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y+=global.z;

if (sprattack) {
d3d_set_fog(true,c_white,0,0);
}

draw_self();

if (sprattack) {
d3d_set_fog(false,c_white,0,0);
}

y-=global.z;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_goldWing</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_y</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_silverWing</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_y</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Player Health to 999 (DEBUG ONLY!)
global.playerHP = 999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_heroWing</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>mouse_y</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>202</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_change_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_snoopdogg</object>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,24</point>
    <point>32,24</point>
    <point>32,48</point>
    <point>0,48</point>
  </PhysicsShapePoints>
</object>
