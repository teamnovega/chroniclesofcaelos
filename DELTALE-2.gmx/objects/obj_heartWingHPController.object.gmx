<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.HWAttack = 0;
global.heartWing[7] = spr_UI_emptyHW;
global.heartWing[6] = spr_UI_emptyHW;
global.heartWing[5] = spr_UI_bronzeHW;
global.heartWing[4] = spr_UI_bronzeHW;
global.heartWing[3] = spr_UI_bronzeHW;
global.heartWing[2] = spr_UI_bronzeHW;
global.heartWing[1] = spr_UI_bronzeHW;
global.heartWing[0] = spr_UI_bronzeHW;
lastWing = 5;
lastNHWing = 5;
for (var i=0; i&lt;array_length_1d(global.heartWing); i++) {
    if (global.heartWing[i] == spr_UI_emptyHW) {
        global.heartWingHP[i] = 0;
        index[i] = 0;
    }
    if (global.heartWing[i] == spr_UI_bronzeHW) {
        global.heartWingHP[i] = 1;
        index[i] = 0;
    }
    if (global.heartWing[i] == spr_UI_silverHW) {
        global.heartWingHP[i] = 2;
        index[i] = 0;
    }
    if (global.heartWing[i] == spr_UI_goldHW) {
        global.heartWingHP[i] = 3;
        index[i] = 0;
    }
    if (global.heartWing[i] == spr_UI_herosHW) {
        global.heartWingHP[i] = 6;
        index[i] = 0;
    }
}


global.playerHP = getArrayTotal(global.heartWingHP);
r=0;
rr=0;
img=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HEARTWING SYSTEM NOTES
// Thanks to: 
// - UnknownEvil,
// - Jakylgamer,
// - FrozenFlame,
// - rIKmAN,
// - net8floz,
// - Minty Python,
// - and rockzom,
// for helping me complete this health system!
// #GameMakerInnovation

/// HeartWing Health System

/// HeartWings are interchangeable "battteries" in DELTALE. There are four types currently in-game:
//// Bronze Wings, Silver Wings, Golden Wings, and Hero's HeartWings.

/// Each HeartWing comes with a separate amount of health.
//// eg. Bronze = 1HP, Silver = 2HP, Gold = 3HP, Heros = 6HP.

///// Full Design Document for HeartWings here: 
///// https://i.imgur.com/s97vPm8.png
///// https://i.imgur.com/Pik5guk.png (more info)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the HeartWing Sprites

    for (var i=0; i&lt;array_length_1d(global.heartWing)-1; i++) {
    //
        // If it's not a Hero's HeartWing( since Hero's Heartwings don't disappear )
        if (global.heartWing[i] != spr_UI_herosHW) {
            // If it's not an EMPTY Hero's HeartWing Slot 
            // (which are permanent and can't be occupied by another HeartWing)
            if (global.heartWing[i] != spr_UI_herosEmptyHW) {
                // Set it to empty (if the HP is also set to 0)
                if (global.heartWingHP[i] == 0) {
                    global.heartWing[i] = spr_UI_emptyHW;
                }
            }
        } 
    //
        else 
    //
        if (global.heartWing[i] == spr_UI_herosHW) {
            // If it is a Hero's Heartwing
                // Set it to "false empty"
            if (global.heartWingHP[i] == 0) {
                global.heartWing[i] = spr_UI_herosEmptyHW;
            }
        }
    //
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Last-Wing + Last-NonHHW-Wing Calculation

if (instance_exists(obj_player)) {

    // LAST WING
    // Sort through every heart-wing slot
    for(var i = array_length_1d(global.heartWing)-1; i &gt;= 0; i--) {
    //
        // Find the last Heart-wing available (going from right to left)
        hwlength = array_length_1d(global.heartWing)-1;
    //
    
        // If it's not an empty slot, 
        // (and it's not a hero's empty slot),
        // obviously this must be the last heart wing in the inventory!
        if (global.heartWing[i] != spr_UI_emptyHW) 
        and (global.heartWing[i] != spr_UI_herosEmptyHW) {
            if (global.heartWingHP[i] != 0) {
                lastWing = i;
                break;
            }
        }
        
    //
    
        // else, if the last one in the inventory is full, then that's the last one!
        else 
        
        if (global.heartWing[hwlength] != spr_UI_emptyHW)
        and (global.heartWing[hwlength] != spr_UI_herosEmptyHW) {
            lastWing = hwlength;
        }
        
    }
    
    
/////////////////////////////////////

    // Last-NonHHW-Wing Calculation
    // Sort through every heart-wing slot
    for(var i = array_length_1d(global.heartWing)-1; i &gt;= 0; i--) {
    
        // If it's an empty slot, and there's something to the left of it,
        // then that must mean it's the last empty one!! (used for pickups)
        if (global.heartWing[i] == spr_UI_emptyHW)
        and (global.heartWing[i-1] != spr_UI_emptyHW)
        and (global.heartWing[i-1] != spr_UI_herosHW)
        and (global.heartWing[i-1] != spr_UI_herosEmptyHW) {
            if (global.heartWingHP[i-1] != 0) {
                lastNHWing = i-1;
                break;
            }
        }
        
        else
        
        if (global.heartWing[7] != spr_UI_emptyHW)
        and (global.heartWing[7] != spr_UI_herosEmptyHW) 
        and (global.heartWing[6] != spr_UI_emptyHW) {
            lastNHWing = 7;
            break;
        }
    }
    
} else {
    lastWing = 0;
    lastNHWing = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate HP + Check For Damage + Animate Low Health Overlay

///////////////////////////////////////////////////////////////////////////// ACTUAL CODE!! VV //////
    
    // getArrayTotal = adds the values in an array, and returns the total
    global.playerHP = getArrayTotal(global.heartWingHP);
    
    
    
    // Check for Damage Done
    // This happens every 5/60 steps.
    if (r==5) {
        r=0;
        
        // global.HWAttack = attack points.
        // Example: if HWAttack is set to 3, the player will take 3 damage.
        
        if(global.HWAttack &gt; 0) {
        
            global.heartWingHP[lastWing] -= 1;
            index[lastWing] += 1;
            global.playerHP = getArrayTotal(global.heartWingHP);
            global.HWAttack -= 1;
            
        } 
    } else {
            r++;
    }
    
    // Animate Low Health Overlay / Stop snd_lowHealth
    
    img++;
    if (audio_is_playing(snd_lowHealth)) {
        if (global.playerHP &gt; 3)
        or (global.playerHP &lt;= 0) {
            audio_stop_sound(snd_lowHealth);
        }
    }
    
    if (audio_is_playing(snd_lowHealth)) {
        exit;
    } else {
        if (instance_exists(obj_player)) {
            // Check for low health
            scr_check_lowHealth();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !window_get_fullscreen() {
    width = window_get_width();
    height = window_get_height();
} else {
    width = display_get_width();
    height = display_get_height();
}
display_set_gui_size(width,height);
xoffset = sprite_get_width(spr_UI_emptyHW)+4;
for (var i=0; i&lt;array_length_1d(global.heartWing); i++) {
        if (room != rm_loadingScreen) {
            // Draw the Heart Wing specified
            draw_sprite(global.heartWing[i],index[i],105+(i*xoffset),21);
            if (global.playerHP &lt;= 3) {
                draw_sprite(spr_UI_lowHealth, img, 105+(i*xoffset), 21);
            }
        } else {
            // Draw the Heart Wing specified
            draw_sprite(global.heartWing[i],index[i],32+(i*xoffset),32);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
